profiles {
    drac {
        apptainer {
            enabled=true
            autoMounts=true
            libraryDir = "/project/ctb-noncodo/Platform/references/apptainer/images"
            cacheDir = "/project/ctb-noncodo/Platform/references/apptainer/cache"
        }
        params {
            max_memory='249G'
            max_cpus=64
            max_time='168h'
        }
        process {
            // TODO: Make less granular process labels and ressources allocation
            withName:HMMCOPY_WIG {
                array = 12
                executor = 'slurm'
                time = { check_max( 1.h * task.attempt, 'time' ) }
                memory = { check_max( 2.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 2 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:ICHORCNA {
                array = 12
                executor = 'slurm'
                time = { check_max( 1.h * task.attempt, 'time' ) }
                memory = { check_max( 2.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 2 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:CHOPPER_LENGTH {
                array = 12
                executor = 'slurm'
                time = { check_max( 1.h * task.attempt, 'time' ) }
                memory = { check_max( 2.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 2 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:MINIMAP2_ALIGN {
                array = 12
                executor = 'slurm'
                time = { check_max( 8.h * task.attempt, 'time' ) }
                memory = { check_max( 20.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 30 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withLabel:samtools_big {
                array = 12
                executor = 'slurm'
                time = { check_max( 2.h * task.attempt, 'time' ) }
                memory = { check_max( 20.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 20 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withLabel:samtools_med {
                array = 12
                executor = 'slurm'
                time = { check_max( 2.h * task.attempt, 'time' ) }
                memory = { check_max( 10.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 10 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withLabel:samtools_small {
                array = 12
                executor = 'slurm'
                time = { check_max( 1.h * task.attempt, 'time' ) }
                memory = { check_max( 2.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 5 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
        }
    }
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
